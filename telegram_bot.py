import telebot
from telebot import types
from twitter_bot import TwitterBot
from config import API_TOKEN, ACCOUNTS_FILE, KEYWORDS_FILE, PUBLIC_ID

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Telegram-–±–æ—Ç–∞
bot = telebot.TeleBot(API_TOKEN)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Twitter-–±–æ—Ç–∞
twitter_bot = TwitterBot(ACCOUNTS_FILE, KEYWORDS_FILE, bot, PUBLIC_ID)

# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞
parser_running = False
# –§–ª–∞–≥ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
allow_text_input = False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
def main_menu(message):
    markup = types.InlineKeyboardMarkup(row_width=2)

    # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞
    if parser_running:
        markup.add(types.InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–µ—Ä", callback_data="stop_parser"))
    else:
        markup.add(types.InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä", callback_data="start_parser"))

    markup.add(
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="add_account"),
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="add_word"),
    )
    markup.add(
        types.InlineKeyboardButton("üìú –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="show_accounts"),
        types.InlineKeyboardButton("üìú –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞", callback_data="show_words"),
    )

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(commands=['start'])
def start_bot(message):
    main_menu(message)

@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    global parser_running, allow_text_input

    if call.data == "start_parser":
        start_parsing(call)
    elif call.data == "stop_parser":
        stop_parsing(call)
    elif call.data == "add_account":
        add_account(call)
    elif call.data == "add_word":
        add_word(call)
    elif call.data == "show_accounts":
        show_accounts(call)
    elif call.data == "show_words":
        show_words(call)
    elif call.data.startswith("delete_account_"):
        confirm_delete_account(call)
    elif call.data.startswith("delete_word_"):
        confirm_delete_word(call)
    elif call.data == "cancel":
        cancel(call)

def start_parsing(call):
    global parser_running
    twitter_bot.start()
    parser_running = True
    bot.send_message(call.message.chat.id, "–ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
    main_menu(call.message)

def stop_parsing(call):
    global parser_running
    twitter_bot.stop()
    parser_running = False
    bot.send_message(call.message.chat.id, "–ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    main_menu(call.message)

def add_account(call):
    global allow_text_input
    allow_text_input = True  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç Twitter –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(msg, save_account)

def save_account(message):
    global allow_text_input
    if not allow_text_input:
        bot.send_message(message.chat.id, "–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–µ—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É.")
        return

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç, –µ—Å–ª–∏ –≤–≤–æ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω
        twitter_bot.save_account(message.text)
        bot.send_message(message.chat.id, f"–ê–∫–∫–∞—É–Ω—Ç {message.text} –¥–æ–±–∞–≤–ª–µ–Ω.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")
    finally:
        allow_text_input = False  # –ó–∞–ø—Ä–µ—â–∞–µ–º –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        main_menu(message)

def add_word(call):
    global allow_text_input
    allow_text_input = True  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(msg, save_word)

def save_word(message):
    global allow_text_input
    if not allow_text_input:
        bot.send_message(message.chat.id, "–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–µ—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É.")
        return

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ, –µ—Å–ª–∏ –≤–≤–æ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω
        twitter_bot.save_keyword(message.text)
        bot.send_message(message.chat.id, f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{message.text}' –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: {str(e)}")
    finally:
        allow_text_input = False  # –ó–∞–ø—Ä–µ—â–∞–µ–º –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        main_menu(message)

def show_accounts(call):
    accounts = twitter_bot.load_accounts()
    markup = types.InlineKeyboardMarkup()
    
    if accounts:
        for account in accounts:
            markup.add(types.InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {account}", callback_data=f"delete_account_{account}"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
        
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, "–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç.")
        main_menu(call.message)

def show_words(call):
    keywords = twitter_bot.load_keywords()
    markup = types.InlineKeyboardMarkup()
    
    if keywords:
        for keyword in keywords:
            markup.add(types.InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {keyword}", callback_data=f"delete_word_{keyword}"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
        
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, "–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç.")
    
    main_menu(call.message)

def confirm_delete_account(call):
    account = call.data.split("_", 2)[2]  # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏–∑ callback_data
    try:
        twitter_bot.delete_account(account)
        bot.send_message(call.message.chat.id, f"–ê–∫–∫–∞—É–Ω—Ç {account} —É–¥–∞–ª–µ–Ω.")
    except Exception as e:
        bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")
    main_menu(call.message)

def confirm_delete_word(call):
    keyword = call.data.split("_", 2)[2]  # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –∏–∑ callback_data
    try:
        twitter_bot.delete_keyword(keyword)
        bot.send_message(call.message.chat.id, f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' —É–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: {str(e)}")
    main_menu(call.message)

def cancel(call):
    global allow_text_input
    allow_text_input = False  # –ó–∞–ø—Ä–µ—â–∞–µ–º –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
    bot.send_message(call.message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    main_menu(call.message)

if __name__ == "__main__":
    bot.polling(none_stop=True)
